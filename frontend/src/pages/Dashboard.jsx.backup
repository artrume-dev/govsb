import { useState } from 'react'
import { Card, CardHeader, CardTitle, CardContent } from '../components/Card'
import { Button } from '../components/Button'
import { Input } from '../components/Input'
import { Alert, AlertDescription } from '../components/Alert'
import { Badge } from '../components/Badge'
import { SentimentBarChart } from '../components/SentimentBarChart'
import { SentimentPieChart } from '../components/SentimentPieChart'
import { useBrandAnalysis } from '../hooks/useBrandAnalysis'
import { formatPercentage, formatDate, getSentimentColor, truncateText } from '../utils/formatters'

export default function Dashboard() {
  const [url, setUrl] = useState('')
  const [urlError, setUrlError] = useState('')
  const { analysis, loading, error, analyze, reset } = useBrandAnalysis()

  const handleSubmit = async (e) => {
    e.preventDefault()
    setUrlError('')

    if (!url.trim()) {
      setUrlError('URL is required')
      return
    }

    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      setUrlError('URL must start with http:// or https://')
      return
    }

    try {
      await analyze(url)
    } catch (err) {
      // Error is handled by the hook
      console.error('Analysis failed:', err)
    }
  }

  const validateUrl = (value) => {
    setUrl(value)
    if (value && !value.startsWith('http://') && !value.startsWith('https://')) {
      setUrlError('URL must start with http:// or https://')
    } else {
      setUrlError('')
    }
  }

  const sentimentData = analysis ? [
    { name: 'Positive', value: analysis.summary.positive },
    { name: 'Neutral', value: analysis.summary.neutral },
    { name: 'Negative', value: analysis.summary.negative }
  ].filter(d => d.value > 0) : []

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary to-secondary">
      {/* Header */}
      <header className="bg-black/70 text-white py-8 shadow-lg">
        <div className="max-w-7xl mx-auto px-4">
          <h1 className="text-4xl font-bold mb-2">üîç VISIBI - AI Brand Monitor</h1>
          <p className="text-lg opacity-90">Track brand mentions and sentiment across AI models</p>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto p-4 mt-8">
        {/* Input Section */}
        <Card className="p-6 mb-8 bg-white shadow-lg">
          <h2 className="text-2xl font-bold mb-4">Analyze Brand</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-semibold mb-2">Enter Brand URL:</label>
              <Input
                type="url"
                placeholder="https://www.yourcompany.com"
                value={url}
                onChange={(e) => validateUrl(e.target.value)}
                disabled={loading}
                className="w-full"
              />
              {urlError && <p className="text-danger text-sm mt-1">{urlError}</p>}
            </div>

            <Button
              type="submit"
              disabled={loading || !!urlError}
              className="w-full bg-gradient-to-r from-primary to-secondary"
            >
              {loading ? (
                <span className="flex items-center justify-center">
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Analyzing...
                </span>
              ) : 'Analyze Brand'}
            </Button>
          </form>

          {error && (
            <Alert className="mt-4" variant="destructive">
              <AlertDescription>
                ‚ùå {error}
              </AlertDescription>
            </Alert>
          )}
        </Card>

        {/* Results Section */}
        {analysis && (
          <div className="animate-slide-in space-y-6">
            {/* Summary Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              <Card className="p-4 bg-white shadow">
                <h3 className="text-xs font-semibold text-gray-600 uppercase mb-1">Brand Name</h3>
                <p className="text-xl font-bold text-primary truncate" title={analysis.brand_name}>
                  {analysis.brand_name}
                </p>
              </Card>

              <Card className="p-4 bg-white shadow">
                <h3 className="text-xs font-semibold text-gray-600 uppercase mb-1">Total Queries</h3>
                <p className="text-2xl font-bold text-primary">{analysis.summary.total_queries}</p>
              </Card>

              <Card className="p-4 bg-white shadow">
                <h3 className="text-xs font-semibold text-gray-600 uppercase mb-1">Mentions</h3>
                <p className="text-2xl font-bold text-primary">{analysis.summary.mentions_count}</p>
              </Card>

              <Card className="p-4 bg-white shadow">
                <h3 className="text-xs font-semibold text-gray-600 uppercase mb-1">Visibility</h3>
                <p className="text-2xl font-bold text-primary">
                  {formatPercentage(analysis.summary.visibility)}
                </p>
              </Card>

              <Card className="p-4 bg-white shadow">
                <h3 className="text-xs font-semibold text-gray-600 uppercase mb-1">Overall Sentiment</h3>
                <p className={`text-2xl font-bold ${getSentimentColor(analysis.summary.overall_sentiment)}`}>
                  {analysis.summary.overall_sentiment}
                </p>
              </Card>
            </div>

            {/* Charts */}
            {sentimentData.length > 0 && (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <SentimentPieChart data={sentimentData} />
                <SentimentBarChart data={sentimentData} />
              </div>
            )}

            {/* Detailed Analysis Table */}
            <Card className="p-6 bg-white shadow-lg">
              <h3 className="text-xl font-bold mb-4">Query-by-Query Analysis</h3>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="text-left px-4 py-3 font-semibold text-sm">#</th>
                      <th className="text-left px-4 py-3 font-semibold text-sm">Query</th>
                      <th className="text-left px-4 py-3 font-semibold text-sm">Mentioned</th>
                      <th className="text-left px-4 py-3 font-semibold text-sm">Sentiment</th>
                      <th className="text-left px-4 py-3 font-semibold text-sm">Confidence</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y">
                    {analysis.analysis.map((item, idx) => (
                      <tr key={idx} className="hover:bg-gray-50">
                        <td className="px-4 py-3 text-sm text-gray-500">{idx + 1}</td>
                        <td className="px-4 py-3">
                          <p className="text-sm italic text-gray-700">
                            "{truncateText(item.query, 60)}"
                          </p>
                        </td>
                        <td className="px-4 py-3">
                          <Badge variant={item.sentiment_analysis.mentioned ? 'success' : 'secondary'}>
                            {item.sentiment_analysis.mentioned ? 'Yes' : 'No'}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <Badge
                            variant={
                              item.sentiment_analysis.sentiment === 'POSITIVE' ? 'success' :
                              item.sentiment_analysis.sentiment === 'NEGATIVE' ? 'destructive' :
                              'secondary'
                            }
                          >
                            {item.sentiment_analysis.sentiment}
                          </Badge>
                        </td>
                        <td className="px-4 py-3">
                          <span className="font-mono text-sm font-medium">
                            {formatPercentage(item.sentiment_analysis.confidence * 100, 0)}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </Card>

            {/* Sample Response */}
            {analysis.analysis[0] && (
              <Card className="p-6 bg-white shadow-lg">
                <h3 className="text-xl font-bold mb-4">Sample Response</h3>
                <div className="bg-gray-50 p-4 rounded border-l-4 border-primary">
                  <p className="text-xs text-gray-500 mb-2 font-semibold">
                    Query: "{truncateText(analysis.analysis[0].query, 80)}"
                  </p>
                  <p className="text-sm text-gray-700 leading-relaxed mt-2">
                    {truncateText(analysis.analysis[0].response, 400)}
                  </p>
                </div>
                <p className="text-xs text-gray-500 mt-3">
                  Analyzed at: {formatDate(analysis.timestamp)}
                </p>
              </Card>
            )}

            {/* Reset Button */}
            <Button
              onClick={() => {
                reset()
                setUrl('')
                setUrlError('')
              }}
              variant="outline"
              className="w-full"
            >
              Analyze Another Brand
            </Button>
          </div>
        )}

        {/* Footer */}
        {!analysis && !loading && (
          <div className="text-center mt-12 text-white/80">
            <p className="text-sm">
              Enter a brand URL above to start monitoring sentiment across AI platforms
            </p>
          </div>
        )}
      </main>
    </div>
  )
}
